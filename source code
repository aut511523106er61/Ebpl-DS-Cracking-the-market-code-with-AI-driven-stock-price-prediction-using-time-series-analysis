import numpy as np import pandas as pd 
import matplotlib.pyplot as plt import yfinance 
as yf from sklearn.preprocessingimport MinMaxScaler from 
tensorflow.keras.models import Sequential 
from tensorflow.keras.layers import LSTM, Dense 
# Step 1: Data Collection ticker 
= 'AAPL' # Example: Apple 
Inc. 
data = yf.download(ticker, start='2010-01-01', end='2023-0101') 
data = data[['Close']] # Using closing price for prediction 
# Step 2: Data Preprocessing scaler = 
MinMaxScaler(feature_range=(0, 1)) scaled_data 
= 
scaler.fit_transform(data) 
# Prepare data for LSTM train_size 
= 
int(len(scaled_data) * 0.8) 
train_data = 
scaled_data[:train_size] 
test_data = scaled_data[train_size:] 
def create_dataset(data, 
time_step=60): X, y = [], [] 
for i in range(time_step, len(data)): 
X.append(data[i-time_step:i, 0]) 
 y.append(data[i, 0]) 
return np.array(X), 
np.array(y) 
X_train, y_train = create_dataset(train_data) 
X_test, y_test = create_dataset(test_data) 
X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1) 
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1) 
# Step 3: Build LSTM Model model 
= Sequential([ 
 LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)), 
 LSTM(units=50, return_sequences=False),
 Dense(units=1)
 ])
 model.compile(optimizer='adam', loss='mean_squared_error') 
# Step 4: Train the Model model.fit(X_train, y_train, 
epochs=10, batch_size=32) 
# Step 5: Make Predictions predictions = model.predict(X_test) 
predictions = 
scaler.inverse_transform(predictions) 
# Visualize the Results  
plt.figure(figsize=(10,6)) 
plt.plot(data.index[train_size + 60:], data['Close'][train_size + 60:], label='Actual 
Prices') plt.plot(data.index[train_size + 60:], predictions, label='Predicted 
Prices') plt.title(f'{ticker} Stock Price Prediction') plt.xlabel('Date') 
plt.ylabel('Price 
(USD)') plt.legend() 
plt.show() 
14.Future Scope:
The future of AI-driven stock price prediction using time series analysi
